" Set compatibility to Vim only.
set nocompatible

"  show special characters
set list

" Set relative line numbers
set rnu

" Helps force plug-ins to load correctly when it is turned back on below.
filetype off

" Turn on syntax highlighting.
syntax on

" set indentation level based on filetype
filetype plugin indent on

" Turn off modelines
set modelines=0

" show invisible characters
set lcs=tab:▸\ ,trail:·,eol:¬,nbsp:_

" Automatically wrap text that extends beyond the screen length.
set nowrap

" When closing an unsaved file move it to a buffer
set hidden

" Draw a line at the 100th character of every line
set colorcolumn=100

" Uncomment below to set the max textwidth. Use a value corresponding to the width of your screen.
set textwidth=100
set formatoptions=tcqrn1
set tabstop=2
set shiftwidth=2
set nospell
set softtabstop=2
set expandtab
set noshiftround
set noerrorbells
set smartindent
set noswapfile
set nobackup

" set up undoing behaviour
set undodir=~/.vim/undodir
set undofile
set undolevels=10000

" copy indentation from current line to the new line. Really useful for end in ruby
set autoindent

" Display 5 lines above/below the cursor when scrolling with a mouse.
set scrolloff=5

" Fixes common backspace problems
set backspace=indent,eol,start

" Speed up scrolling in Vim
set ttyfast

" enable hardtime mode. Stop repeating keys
let g:hardtime_default_on = 1
" allow jj but not jjj
let g:hardtime_maxcount = 2

" Status bar
set laststatus=2

" Display options
set showmode
set showcmd

" Highlight matching pairs of brackets. Use the '%' character to jump between them.
set matchpairs+=<:>

" Show line numbers
set number

" Encoding
set encoding=utf-8

" Highlight matching search patterns. Starts highlighting as soon as there's a match using a greedy
" strategy.
set hlsearch

" Enable incremental search. While typing it starts a new search.
set incsearch

" Include matching uppercase words with lowercase search term
set ignorecase

" Include only uppercase words with uppercase search term
set smartcase

set foldmethod=syntax
set nofoldenable

set updatetime=100

" Always show the signcolumn, otherwise it would shift the text each time
" diagnostics appear/become resolved.
set signcolumn=yes

" Store info from no more than 100 files at a time, 9999 lines of text, 100kb of data. Useful for copying large amounts of data between files.
set viminfo='100,<9999,s100
set re=2

" Use <c-space> to trigger completion.
if has('nvim')
  inoremap <silent><expr> <c-space> coc#refresh()
else
  inoremap <silent><expr> <c-@> coc#refresh()
endif

" Make <CR> auto-select the first completion item and notify coc.nvim to
" format on enter, <cr> could be remapped by other vim plugin
inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

let mapleader = " "
noremap <leader>w :w<cr>
noremap <leader>p :GFiles<cr>
noremap <leader>b :Buffers<cr>
noremap <leader>r :Rails<cr>
noremap <leader>v :execute 'Ag ' . expand('<cword>')<cr>
command! -bang -nargs=* Ag call fzf#vim#ag(<q-args>, {'options': '--delimiter : --nth 4..'}, <bang>0)

" Copy to clipboard relative file path
nnoremap <c-l> :let @*=expand("%")<CR>
" Copy to clipboard relative file path with line number included
nnoremap <c-n> :let @*=fnamemodify(expand("%"), ":~:.") . ":" . line(".")<CR>

" Fuzzy search the whole project
noremap <leader>f :Ag<cr>

" Open a split vertical split pane
noremap <silent> vv <C-w>v

" Disable the search hightlight with hotkey. Useful to stop typing :noh
nnoremap <C-h> :set hlsearch!<CR>

" Auto center the buffer when moving vertically
nnoremap <C-d> <C-d>zz
nnoremap <C-u> <C-u>zz

" Auto format with Coc projects
noremap <leader>g :Format <cr>

" Add `:Format` command to format current buffer.
command! -nargs=0 Format :call CocAction('format')

" Add `:Fold` command to fold current buffer.
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" Add `:OR` command for organize imports of the current buffer.
command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

let g:fzf_layout = { 'down': '~60%' }


" Automatically install vim-plug if not present: https://github.com/junegunn/vim-plug/wiki/tips#automatic-installation
let data_dir = has('nvim') ? stdpath('data') . '/site' : '~/.vim'
if empty(glob(data_dir . '/autoload/plug.vim'))
  silent execute '!curl -fLo '.data_dir.'/autoload/plug.vim --create-dirs  https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif


call plug#begin('~/.vim/plugged')
Plug 'dstein64/vim-startuptime'
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'leafgarland/typescript-vim'
Plug 'maxmellon/vim-jsx-pretty'
Plug 'neoclide/coc.nvim' , { 'branch' : 'release' }
Plug 'pangloss/vim-javascript'    " JavaScript support
Plug 'takac/vim-hardtime'
Plug 'shime/vim-livedown', { 'for': 'markdown' }
"" TODO review usage appart from coercion
Plug 'tpope/vim-abolish'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-surround'
Plug 'kana/vim-textobj-user' | Plug 'nelstrom/vim-textobj-rubyblock'
"" Note: Increases startuptime by 100ms. 
Plug 'vim-airline/vim-airline'
Plug 'preservim/nerdtree'
Plug 'dracula/vim', { 'as': 'dracula' }
Plug 'tpope/vim-unimpaired'
Plug 'tpope/vim-rails'
" TODO review
" Plug 'mattn/emmet-vim'
call plug#end()

" Adds true color support in neovim
set termguicolors
colorscheme dracula

inoremap <silent><expr> <c-space> coc#refresh()

map <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" select last paste in visual mode
nnoremap <expr> gb '`[' . strpart(getregtype(), 0, 1) . '`]'

" remap the esc keybinding in terminal mode
tnoremap jk <C-\><C-n>
tnoremap kj <C-\><C-n>

autocmd CursorHold * silent call CocActionAsync('highlight')

" rename the symbol
nmap <leader>rn <Plug>(coc-rename)

" Remap keys for apply code actions at the cursor position.
nmap <leader>ac  <Plug>(coc-codeaction-cursor)

let g:coc_global_extensions = [ 'coc-tsserver']

" sets the max number of autocomplete elements
:set pumheight=8

nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)
xmap if <Plug>(coc-funcobj-i)
omap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap af <Plug>(coc-funcobj-a)
xmap ic <Plug>(coc-classobj-i)
omap ic <Plug>(coc-classobj-i)
xmap ac <Plug>(coc-classobj-a)
omap ac <Plug>(coc-classobj-a)

"" fix for large files syntax hightlighting
autocmd BufEnter *.{js,jsx,ts,tsx} :syntax sync fromstart
autocmd BufLeave *.{js,jsx,ts,tsx} :syntax sync clear

" Use CTRL-S for growing selection.
nmap <silent> <C-s> <Plug>(coc-range-select)
xmap <silent> <C-s> <Plug>(coc-range-select)

" Mappings for CoC
" Show all diagnostics.
nnoremap <silent><nowait> <space>a  :<C-u>CocList diagnostics<cr>
" Manage extensions.
nnoremap <silent><nowait> <space>e  :<C-u>CocList extensions<cr>
" Show commands.
nnoremap <silent><nowait> <space>c  :<C-u>CocList commands<cr>
" Find symbol of current document.
nnoremap <silent><nowait> <space>o  :<C-u>CocList outline<cr>
" Search workspace symbols.
nnoremap <silent><nowait> <space>s  :<C-u>CocList -I symbols<cr>

"" Navigate using <Space> + hjkl between panes
nnoremap <leader>h :wincmd h<CR>
nnoremap <leader>j :wincmd j<CR>
nnoremap <leader>k :wincmd k<CR>
nnoremap <leader>l :wincmd l<CR>

"" NERDTree plugin remaps
nnoremap <C-t> :NERDTreeFind<CR>
nnoremap <C-w> :NERDTreeToggle<CR>

" Autocomplete HTML tags
autocmd FileType html,jsx,tsx,eruby set omnifunc=htmlcomplete#CompleteTags

" remap esc to jk or kj aksdjf
inoremap jk <esc>
inoremap kj <esc>

" Allows better motions in ruby blocks: https://github.com/nelstrom/vim-textobj-rubyblock
runtime macros/matchit.vim

"" Rename current file
function! RenameFile()
  let old_name = expand('%')
  let new_name = input('New file name: ', expand('%'), 'file')
  if new_name != '' && new_name != old_name
    exec ':saveas ' . new_name
    exec ':silent !rm ' . old_name
    redraw!
  endif
endfunction
map <leader>rf :call RenameFile()<cr>

"" fix tailwind autocomplete
au FileType html let b:coc_root_patterns = ['.git', '.env', 'config/tailwind.config.js', 'tailwind.config.cjs']

"" Automatically apply the dotfiles conf when modifying a file
autocmd BufWritePost ~/.local/share/chezmoi/* ! chezmoi apply --source-path "%"
